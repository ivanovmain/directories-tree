{"version":3,"sources":["directory/index.ts","directory/Directory.tsx","directories/Directories.tsx","directories/index.ts","app/App.tsx","app/index.ts","index.tsx"],"names":["Directory","nodeId","label","nodeIds","useState","directories","setDirectories","isLoading","setIsLoading","isOpenDirectory","includes","useEffect","fetch","then","res","ok","json","Error","result","error","console","log","TreeItem","directoriesChildren","children","length","map","child","String","id","title","useStyles","makeStyles","root","height","flexGrow","maxWidth","Directories","setError","setNodeids","catch","reason","classes","CircularProgress","size","color","Typography","variant","TreeView","className","defaultCollapseIcon","defaultExpandIcon","onNodeSelect","e","prevState","idx","findIndex","newArr","filter","expanded","multiSelect","appBar","marginBottom","container","paddingLeft","link","App","Box","CssBaseline","AppBar","position","Toolbar","Link","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d52c6d33.chunk.js","sourcesContent":["import Directory from \"./Directory\";\r\n\r\nexport default Directory;","import React, {useEffect, useState} from \"react\";\r\nimport TreeItem from \"@material-ui/lab/TreeItem\";\r\n\r\n\r\ninterface IDirectory {\r\n  nodeId: string,\r\n  label: string,\r\n  nodeIds: Array<string>\r\n}\r\n\r\nconst Directory: React.FC<IDirectory> = ({nodeId, label, nodeIds}) => {\r\n\r\n  const [directories, setDirectories] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  const isOpenDirectory = nodeIds.includes(nodeId);\r\n\r\n  useEffect(() => {\r\n    if (isOpenDirectory) {\r\n      setIsLoading(true);\r\n      fetch(`http://164.90.161.80:3000/api/content?dirId=${nodeId}`)\r\n        .then((res) => {\r\n          if (res.ok) {\r\n            return res.json();\r\n          } else {\r\n            throw new Error('Something went wrong');\r\n          }\r\n        })\r\n        .then(\r\n          (result) => {\r\n            setIsLoading(false);\r\n            setDirectories(result);\r\n          },\r\n          (error) => {\r\n            setIsLoading(false);\r\n            console.log(error)\r\n          }\r\n        )\r\n    }\r\n  }, [isOpenDirectory, nodeId])\r\n\r\n  if (isLoading) {\r\n    return <TreeItem nodeId={nodeId} label={label} />\r\n  }\r\n\r\n  const directoriesChildren = (directories && directories.children) || [];\r\n\r\n  if (directoriesChildren.length === 0) {\r\n    return <TreeItem nodeId={nodeId} label={label} />\r\n  }\r\n\r\n  return (\r\n    <TreeItem nodeId={nodeId} label={label} >\r\n      {\r\n        directoriesChildren.map((child: {id: number, title: string, children: Array<any>}) => {\r\n          return (\r\n            <Directory\r\n              key={child.id}\r\n              nodeId={String(child.id)}\r\n              label={child.title}\r\n              nodeIds={nodeIds}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </TreeItem>\r\n  );\r\n}\r\n\r\nexport default Directory;","import React, {useEffect, useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Directory from \"../directory\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 216,\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n});\r\n\r\nconst Directories: React.FC = () => {\r\n\r\n  const [directories, setDirectories] = useState<any>(null);\r\n  const [error, setError] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [nodeIds, setNodeids] = useState<Array<string>>([]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetch(\"http://164.90.161.80:3000/api/content\")\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          throw new Error('Something went wrong');\r\n        }\r\n      })\r\n      .then(\r\n        (result) => {\r\n          setIsLoading(false);\r\n          setDirectories(result);\r\n        },\r\n        (error) => {\r\n          setIsLoading(false);\r\n          setError(error);\r\n        }\r\n      )\r\n      .catch((reason) => {\r\n        console.log('reason', reason)\r\n      })\r\n  }, [])\r\n\r\n  const handleToggle = (e: object, nodeIds: Array<string>) => {\r\n    setNodeids((prevState => {\r\n      const idx = prevState.findIndex((id) => id === nodeIds[0]);\r\n      let newArr: Array<string> = [];\r\n      if (idx >= 0) {\r\n        newArr = prevState.filter((id) => id !== nodeIds[0]);\r\n      } else if (idx === -1) {\r\n        newArr = [...prevState, ...nodeIds];\r\n      }\r\n      return newArr;\r\n    }));\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  if (isLoading) {\r\n    return <CircularProgress size={40} color=\"secondary\"/>\r\n  }\r\n  if (error) {\r\n    return <Typography variant=\"h5\" color=\"secondary\">Возникла ошибка зарузки данных...</Typography>\r\n  }\r\n\r\n  const directoriesChildren = directories && directories.children || [];\r\n  if (directoriesChildren.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <TreeView\r\n      className={classes.root}\r\n      defaultCollapseIcon={<ExpandMoreIcon />}\r\n      defaultExpandIcon={<ChevronRightIcon />}\r\n      onNodeSelect={handleToggle}\r\n      expanded={nodeIds}\r\n      multiSelect\r\n    >\r\n      {\r\n        directoriesChildren.map((child: {id: number, title: string}) => {\r\n          return (\r\n            <Directory\r\n              key={child.id}\r\n              nodeId={String(child.id)}\r\n              label={child.title}\r\n              nodeIds={nodeIds}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </TreeView>\r\n  );\r\n}\r\n\r\nexport default Directories;","import Directories from \"./Directories\";\r\n\r\nexport default Directories;","import React from 'react';\nimport Directories from \"../directories\";\nimport {AppBar, Box, Toolbar} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Link from \"@material-ui/core/Link\";\n\nconst useStyles = makeStyles({\n  title: {\n    color: \"#fff\"\n  },\n  appBar: {\n    marginBottom: \"20px\"\n  },\n  container: {\n    paddingLeft: \"20px\"\n  },\n  link: {\n    paddingLeft: \"60px\"\n  },\n});\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return (\n    <Box>\n      <CssBaseline />\n      <AppBar className={classes.appBar} position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\" className={classes.title}>\n            Digital Habits. Entrance test\n          </Typography>\n          <Typography variant=\"h5\">\n            <Link color={\"secondary\"} href={\"https://github.com/ivanovmain/directories-tree\"} className={classes.link}>\n              Github - Ivanov\n            </Link>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Box className={classes.container}>\n        <Directories />\n      </Box>\n\n    </Box>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}